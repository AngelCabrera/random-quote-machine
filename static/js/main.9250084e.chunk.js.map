{"version":3,"sources":["components/Quote.js","components/Buttons.js","components/Footer.js","variables/variables.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","style","color","currentColor","className","quote","author","Component","Buttons","href","encodeURIComponent","target","backgroundColor","textTransform","onClick","handleEvent","Footer","width","marginTop","textAlign","random","length","Math","floor","App","_this","state","quotes","bind","assertThisInitialized","setState","_this2","fetch","then","response","json","data","filter","i","components_Quote","components_Buttons","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9250084e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Quote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"text\" style={{ color: this.props.currentColor }}>\r\n          <i id=\"quote\" className=\"fa fa-quote-left\" />\r\n          {this.props.quote.quote}\r\n        </div>\r\n        <div id=\"author\" style={{ color: this.props.currentColor }}>\r\n          - {this.props.quote.author}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"buttons-area\">\r\n        <a\r\n          href={\r\n            \"https://twitter.com/intent/tweet?hashtags=FreeCodeCamp&related=freecodecamp&text=\" +\r\n            encodeURIComponent(\r\n              '\"' + this.props.quote.quote + '\" ' + this.props.quote.author\r\n            )\r\n          }\r\n          id=\"tweet-quote\"\r\n          target=\"_blank\"\r\n        >\r\n          <button\r\n            className=\"bttn-material-flat bttn-md bttn-no-outline\"\r\n            style={{ backgroundColor: this.props.currentColor, color: \"white\" }}\r\n          >\r\n            <i className=\"fa fa-twitter\" />\r\n          </button>\r\n        </a>\r\n        <button\r\n          id=\"new-quote\"\r\n          className=\"bttn-material-flat bttn-md bttn-no-outline\"\r\n          style={{\r\n            backgroundColor: this.props.currentColor,\r\n            color: \"white\",\r\n            textTransform: \"none\"\r\n          }}\r\n          onClick={this.props.handleEvent}\r\n        >\r\n          New Quote\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n        <p style={{ textAlign: \"center\" }}>\r\n          Creado por Ángel Cabrera, inspirado en el{\" \"}\r\n          <a\r\n            href=\"https://codepen.io/freeCodeCamp/full/qRZeGZ\"\r\n            target=\"_blank\"\r\n            style={{ color: \"white\" }}\r\n          >\r\n            diseño de <i>hezag</i>\r\n          </a>{\" \"}\r\n          para FCC.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","export const color = [\r\n  \"#ef5350\",\r\n  \"#ec407a\",\r\n  \"#ab47bc\",\r\n  \"#7e57c2\",\r\n  \"#5c6bc0\",\r\n  \"#42a5f5\",\r\n  \"#29b6f6\",\r\n  \"#26c6da\",\r\n  \"#26a69a\",\r\n  \"#66bb6a\",\r\n  \"#ffa726\",\r\n  \"#ff7043\",\r\n  \"#8d6e63\",\r\n  \"#bdbdbd\",\r\n  \"#78909c\"\r\n];\r\n\r\nexport const random = length => Math.floor(Math.random() * length);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Quote from \"./components/Quote.js\";\r\nimport Buttons from \"./components/Buttons.js\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport { color } from \"./variables/variables.js\";\r\nimport { random } from \"./variables/variables.js\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quotes: [],\r\n      quote: { quote: \"Loading...\", author: \"\" }\r\n    };\r\n    this.handleEvent = this.handleEvent.bind(this);\r\n  }\r\n  handleEvent() {\r\n    this.setState({\r\n      quote: this.state.quotes[random(this.state.quotes.length)]\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://gist.githubusercontent.com/camperbot/\" +\r\n        \"5a022b72e96c4c9585c32bf6a75f62d9/raw/\" +\r\n        \"e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n    ).then(response =>\r\n      response.json().then(data =>\r\n        this.setState({\r\n          quotes: data.quotes.filter(i => i.quote.length < 120),\r\n          quote: data.quotes[random(data.quotes.length)]\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let currentColor = color[random(color.length)];\r\n    return (\r\n      <div id=\"main-wrapper\" style={{ backgroundColor: currentColor }}>\r\n        <div id=\"quote-box\">\r\n          <Quote currentColor={currentColor} quote={this.state.quote} />\r\n          <Buttons\r\n            currentColor={currentColor}\r\n            quote={this.state.quote}\r\n            handleEvent={this.handleEvent}\r\n          />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}